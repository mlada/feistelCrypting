from common import *
 
class Crypt:

    const_2_16 = 2**16
    # список всех символов обычного текста. 
    ftable = [
        0xFC,  0xEE,  0xDD, 0x11,  0xCF, 0x6E, 0x31, 0x16,
        0xFB,  0xC4,  0xFA,  0xDA, 0x23,  0xC5, 0x04, 0x4D,
        0xE9, 0x77,  0xF0,  0xDB,  0x93, 0x2E,  0x99,  0xBA,
        0x17, 0x36,  0xF1,  0xBB, 0x14,  0xCD, 0x5F,  0xC1,
        0xF9, 0x18, 0x65, 0x5A,  0xE2, 0x5C,  0xEF, 0x21,
        0x81, 0x1C, 0x3C, 0x42,  0x8B, 0x01,  0x8E, 0x4F,
        0x05,  0x84, 0x02,  0xAE,  0xE3, 0x6A,  0x8F,  0xA0,
        0x06, 0x0B,  0xED,  0x98, 0x7F,  0xD4,  0xD3, 0x1F,
        0xEB, 0x34, 0x2C, 0x51,  0xEA,  0xC8, 0x48,  0xAB,
        0xF2, 0x2A, 0x68,  0xA2,  0xFD, 0x3A,  0xCE,  0xCC,
        0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12,
        0xBF, 0x72, 0x13, 0x47,  0x9C,  0xB7, 0x5D,  0x87,
        0x15,  0xA1,  0x96, 0x29, 0x10, 0x7B,  0x9A,  0xC7,
        0xF3,  0x91, 0x78, 0x6F,  0x9D,  0x9E,  0xB2,  0xB1,
        0x32, 0x75, 0x19, 0x3D,  0xFF, 0x35,  0x8A, 0x7E,
        0x6D, 0x54,  0xC6,  0x80,  0xC3,  0xBD, 0x0D, 0x57,
        0xDF,  0xF5, 0x24,  0xA9, 0x3E,  0xA8,  0x43,  0xC9,
        0xD7, 0x79,  0xD6,  0xF6, 0x7C, 0x22,  0xB9, 0x03,
        0xE0, 0x0F,  0xEC,  0xDE, 0x7A,  0x94,  0xB0,  0xBC,
        0xDC,  0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
        0xA7,  0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44,
        0x1A,  0xB8, 0x38,  0x82, 0x64,  0x9F, 0x26, 0x41,
        0xAD, 0x45, 0x46,  0x92, 0x27, 0x5E, 0x55, 0x2F,
        0x8C,  0xA3,  0xA5, 0x7D, 0x69,  0xD5,  0x95, 0x3B,
        0x07, 0x58,  0xB3, 0x40,  0x86,  0xAC, 0x1D,  0xF7,
        0x30, 0x37, 0x6B,  0xE4,  0x88,  0xD9,  0xE7,  0x89,
        0xE1, 0x1B,  0x83, 0x49, 0x4C, 0x3F,  0xF8,  0xFE,
        0x8D, 0x53,  0xAA,  0x90,  0xCA,  0xD8,  0x85, 0x61,
        0x20, 0x71, 0x67,  0xA4, 0x2D, 0x2B, 0x09, 0x5B,
        0xCB,  0x9B, 0x25,  0xD0,  0xBE,  0xE5, 0x6C, 0x52,
        0x59,  0xA6, 0x74,  0xD2,  0xE6,  0xF4,  0xB4,  0xC0,
        0xD1, 0x66,  0xAF,  0xC2, 0x39, 0x4B, 0x63,  0xB6
        ]

    reverce_ftable = [
        0xA5, 0x2D, 0x32,  0x8F, 0x0E, 0x30, 0x38,  0xC0,
        0x54,  0xE6,  0x9E, 0x39, 0x55, 0x7E, 0x52,  0x91,
        0x64, 0x03, 0x57, 0x5A, 0x1C, 0x60, 0x07, 0x18,
        0x21, 0x72,  0xA8,  0xD1, 0x29,  0xC6,  0xA4, 0x3F,
        0xE0, 0x27,  0x8D, 0x0C,  0x82,  0xEA,  0xAE,  0xB4,
        0x9A, 0x63, 0x49,  0xE5, 0x42,  0xE4, 0x15,  0xB7,
        0xC8, 0x06, 0x70,  0x9D, 0x41, 0x75, 0x19,  0xC9,
        0xAA,  0xFC, 0x4D,  0xBF, 0x2A, 0x73,  0x84,  0xD5,
        0xC3,  0xAF, 0x2B,  0x86,  0xA7,  0xB1,  0xB2, 0x5B,
        0x46,  0xD3,  0x9F,  0xFD,  0xD4, 0x0F,  0x9C, 0x2F,
        0x9B, 0x43,  0xEF,  0xD9, 0x79,  0xB6, 0x53, 0x7F,
        0xC1,  0xF0, 0x23,  0xE7, 0x25, 0x5E,  0xB5, 0x1E,
        0xA2,  0xDF,  0xA6,  0xFE,  0xAC, 0x22,  0xF9,  0xE2,
        0x4A,  0xBC, 0x35,  0xCA,  0xEE, 0x78, 0x05, 0x6B,
        0x51,  0xE1, 0x59,  0xA3,  0xF2, 0x71, 0x56, 0x11,
        0x6A,  0x89,  0x94, 0x65,  0x8C,  0xBB, 0x77, 0x3C,
        0x7B, 0x28,  0xAB,  0xD2, 0x31,  0xDE,  0xC4, 0x5F,
        0xCC,  0xCF, 0x76, 0x2C,  0xB8,  0xD8, 0x2E, 0x36,
        0xDB, 0x69,  0xB3, 0x14,  0x95,  0xBE, 0x62,  0xA1,
        0x3B, 0x16, 0x66,  0xE9, 0x5C, 0x6C, 0x6D,  0xAD,
        0x37, 0x61, 0x4B,  0xB9,  0xE3,  0xBA,  0xF1,  0xA0,
        0x85,  0x83,  0xDA, 0x47,  0xC5,  0xB0, 0x33,  0xFA,
        0x96, 0x6F, 0x6E,  0xC2,  0xF6, 0x50,  0xFF, 0x5D,
        0xA9,  0x8E, 0x17, 0x1B,  0x97, 0x7D,  0xEC, 0x58,
        0xF7, 0x1F,  0xFB, 0x7C, 0x09, 0x0D, 0x7A, 0x67,
        0x45,  0x87,  0xDC,  0xE8, 0x4F, 0x1D, 0x4E, 0x04,
        0xEB,  0xF8,  0xF3, 0x3E, 0x3D,  0xBD,  0x8A,  0x88,
        0xDD,  0xCD, 0x0B, 0x13,  0x98, 0x02,  0x93,  0x80,
        0x90,  0xD0, 0x24, 0x34,  0xCB,  0xED,  0xF4,  0xCE,
        0x99, 0x10, 0x44, 0x40,  0x92, 0x3A, 0x01, 0x26,
        0x12, 0x1A, 0x48, 0x68,  0xF5,  0x81,  0x8B,  0xC7,
        0xD6, 0x20, 0x0A, 0x08, 0x00, 0x4C,  0xD7, 0x74 
         ]

    def __init__(self, key_generator):
        self.original_key = key_generator.getOriginalKey()
        self.keys = key_generator.getKeys()

    def whitening(self, word, key):
        r = []

        key = format(key, "016x")
        for i in range(0, 4):
            j = i * 4

            sw = word[j: j + 4]
            sk = key[4 * i:4 * i + 4]
            w = int(sw, 16) ^ int(sk, 16)
            r.append(w)
        return r

    def g_function(self, r, k0, k1, k2, k3):
        r = format(r, '04x')
        g1 = int(r[:2], 16)
        g2 = int(r[2:4], 16)
        g3 = int(self.ftable[g2 ^ k0]) ^ g1
        g4 = int(self.ftable[g3 ^ k1]) ^ g2
        g5 = int(self.ftable[g4 ^ k2]) ^ g3
        g6 = int(self.ftable[g5 ^ k3]) ^ g4
        # print("g1: " + hex(g1) + ' g2: ' + hex(g2) + ' g3: ' + hex(g3) + ' g4: ' + hex(g4) + ' g5: ' + hex(g5) + ' g6: ' + hex(g6))
        return int(format(g5, '02x') + format(g6, '02x'), 16)

    def f_function(self, r0, r1, round):
        k = self.keys[round]

        # print("Keys: ", end = ' ')
        # for ki in k:
        #     print(hex(ki), end = ' ')
        # print()

        t0 = self.g_function(r0, k[0], k[1], k[2], k[3])
        t1 = self.g_function(r1, k[4], k[5], k[6], k[7])
        # print("t0: " + hex(t0) + " t1: " + hex(t1))

        k89 = int(format(k[8], '02x') + format(k[9], '02x'), 16)
        kab = int(format(k[10], '02x') + format(k[11], '02x'), 16)
        f0 = (t0 + 2 * t1 + k89) % self.const_2_16
        f1 = (2 * t0 + t1 + kab) % self.const_2_16
        return [f0, f1]

    def round_function(self, r, round):
        f = self.f_function(r[0], r[1], round)
        # print("f0: " + hex(f[0]) + " f1: " + hex(f[1]))

        new_r0 = r[2] ^ f[0]
        new_r1 = r[3] ^ f[1]
        new_r2 = r[0]
        new_r3 = r[1]
        return [new_r0, new_r1, new_r2, new_r3]
    
    def encrypt(self, pt_hex):
        r = self.whitening(pt_hex, self.original_key)

        # print("\n\n\nEncryption:")
        for i in range(0, 16):
            # print("Beginning of Round: " + str(i))
            r = self.round_function(r, i)
            # print("Block: " + hex(r[0]) + hex(r[1])[2:] + hex(r[2])[2:] + hex(r[3])[2:])
            # print("End of Round: " + str(i))
            # print()

        y = [r[2], r[3], r[0], r[1]]
        y_hex = ""
        for yi in y:
            y_hex += format(yi, "04x")

        # print("y_hex = " + y_hex)
        c = self.whitening(y_hex, self.original_key)
        c_str = ""
        # print("\n\nCiphertext: 0x", end = '')
        for ci in c:
            c_str += format(ci, "04x")
        #     print(format(ci, "04x"), end = '')
        # print(c_str)
        return c_str

    def decrypt(self, ct_hex):
        r = self.whitening(ct_hex, self.original_key)
        for i in range(15, -1, -1):
            # print("Beginning of Round: " + str(i))
            r = self.round_function(r, i)
            # print("Block: " + hex(r[0]) + hex(r[1])[2:] + hex(r[2])[2:] + hex(r[3])[2:])
            # print("End of Round: " + str(i))
            # print()

        p = [r[2], r[3], r[0], r[1]]
        p_hex = ""
        for pi in p:
            p_hex += format(pi, "04x")

        p = self.whitening(p_hex, self.original_key)
        # print("\n\nPlaintext: 0x", end = '')
        p_str = ""
        for pi in p:
            p_str += format(pi, "04x")
        # print(p_str)
        return p_str