
import math
import binascii
import re

def readFile(filename): 
    f1 = open(filename, "r", encoding='utf-8')
    msg = f1.read()
    f1.close()
    return msg

def writeFile(file, line):
    file2 = open(file, 'w', encoding='utf-8')
    file2.write(line)
    file2.close

def string_to_binary(text, encoding='utf-8', errors='surrogatepass'):
    print(text)
    text_encode = text.encode(encoding, errors)
    binary_text = binascii.hexlify(text_encode)
    print(binary_text)
    bits = bin(int(binary_text, 16))[2:]
    return bits.zfill(8 * ((len(bits) + 7) // 8))

def binary_to_string(s):
    return ''.join(chr(int(s[i*8:i*8+8],2)) for i in range(len([s])//8))

def shift(lst, steps):
        lst = list(lst)
        if steps < 0:
            steps = abs(steps)
            for i in range(steps):
                lst.append(lst.pop(0))
        else:
            for i in range(steps):
                lst.insert(0, lst.pop())
        return ''.join(lst)

def line_gen(N,a,c,x):
    if N==1:
        return math.ceil(math.fmod(a*math.ceil(x)+c,N))
    r=[0 for i in range(N)]
    r[0]=math.ceil(x)
    for i in range(1,N):
        r[i]=math.ceil(math.fmod((a*r[i-1]+c),N))
    return r[1:N]

def in_bin(LK):
    st=""
    for i in range(len(LK)):
        st=st+format(LK[i], 'b')
    return st

def gamma(msg, key):
    if len(msg)!=len(key):
        return -1
    g=''
    for i in range(len(msg)):
        if (msg[i]==key[i]):
            g = g + '0'
        else:
            g = g + '1'       
    return g

def code():
    msg = readFile("message.txt")
    msgbin = string_to_binary(msg)
    LK=line_gen(len(msg)*3,1,3,5)
    key = in_bin(LK)[:len(msgbin)]
    a = gamma(msgbin, key)
    print(a)
    a1 = binary_to_string(a)
    writeFile("encode_message.txt", a1)
    writeFile("gamma_key.txt", key)
    print(a1)
    
    
def decode():
    msg = readFile("encode_message.txt")
    key = readFile("gamma_key.txt")
    msgbin = string_to_binary(msg)
    print(msgbin)
    print(key)
    a = gamma(msgbin, key)
    print(a)
    a1 = binary_to_string(a)
    writeFile("decode_message.txt", a1)
    print(a1)

code()
decode()
